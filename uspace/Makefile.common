#
# Copyright (c) 2005 Martin Decky
# Copyright (c) 2007 Jakub Jermar
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# - The name of the author may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Individual makefiles set:
#
#   USPACE_PREFIX  (*) relative path to uspace/ directory
#   SOURCES        (*) list of source files
#   LIBS               libraries to link with
#   DEFS               compiler defines
#   EXTRA_CFLAGS       additional flags to pass to C compiler
#   LINKER_SCRIPT      linker script
#   PRE_DEPEND         targets required for dependency check
#
#   BINARY         (/) binary output name (like appname)
#   LIBRARY        (/) library output name (like libname)
#
#   EXTRA_OUTPUT       additional output targets
#   EXTRA_CLEAN        additional cleanup targets
#
#   MATH               set to 'y' to use the math library
#   POSIX_COMPAT       set to 'y' to use POSIX compatibility layer
#
# Optionally, for a binary:
#   STATIC_NEEDED      set to 'y' for init binaries, will build statically
#                      linked version
#   STATIC_ONLY        set to 'y' if binary cannot be linked dynamically
#                      (e.g. uses thread-local variables)
#
# Optionally, for a libary:
#   SLIBRARY           Name with full version, e.g. libfoo.so.0.0
#   LSONAME            Soname / name with short version, e.g. libfoo.so.0
#
# (x) required variables
# (/) exactly one of the variables must be defined
#

ROOT_PATH = $(USPACE_PREFIX)/..

VERSION_DEF = $(ROOT_PATH)/version

COMMON_MAKEFILE = $(ROOT_PATH)/Makefile.common
COMMON_HEADER = $(ROOT_PATH)/common.h

CONFIG_MAKEFILE = $(ROOT_PATH)/Makefile.config
CONFIG_HEADER = $(ROOT_PATH)/config.h

-include $(VERSION_DEF)
-include $(COMMON_MAKEFILE)
-include $(CONFIG_MAKEFILE)

ifneq ($(BINARY),)
	JOB = $(BINARY).job
	OUTPUT = $(BINARY)
	TEST_BINARY = test-$(BINARY)
	EXTRA_OUTPUT += $(BINARY).disasm
	EXTRA_CLEAN += $(BINARY).map
endif

ifneq ($(LIBRARY),)
	JOB = $(LIBRARY).job
	OUTPUT = $(LIBRARY).a
	TEST_BINARY = test-$(LIBRARY)
endif

ifeq ($(CONFIG_BUILD_SHARED_LIBS),y)
	ifneq ($(SLIBRARY),)
		LARCHIVE = $(LIBRARY).la
		LOUTPUT = $(SLIBRARY)
		EXTRA_OUTPUT += $(LOUTPUT).disasm $(LIBRARY).so $(LSONAME)
		EXTRA_CLEAN += $(LOUTPUT).map $(LOUTPUT).disasm \
		    $(LIBC_PREFIX)/shared/arch/$(UARCH)/_lib.ld \
		    $(LIBRARY).so $(LSONAME)
	endif
endif

LIB_PREFIX = $(USPACE_PREFIX)/lib

LIBC_PREFIX = $(LIB_PREFIX)/c
LIBC_INCLUDES_FLAGS = \
	-I$(LIBC_PREFIX)/include \
	-I$(LIBC_PREFIX)/arch/$(UARCH)/include \
	-I$(ROOT_PATH)/abi/include
LIBSOFTFLOAT_PREFIX = $(LIB_PREFIX)/softfloat
LIBSOFTINT_PREFIX = $(LIB_PREFIX)/softint

LIBMATH_PREFIX = $(LIB_PREFIX)/math
LIBMATH_INCLUDES_FLAGS = \
	-I$(LIBMATH_PREFIX)/include \
	-I$(LIBMATH_PREFIX)/arch/$(UARCH)/include

LIBPOSIX_PREFIX = $(LIB_PREFIX)/posix

LIBCRYPTO_PREFIX = $(LIB_PREFIX)/crypto
LIBBLOCK_PREFIX = $(LIB_PREFIX)/block
LIBFDISK_PREFIX = $(LIB_PREFIX)/fdisk
LIBLABEL_PREFIX = $(LIB_PREFIX)/label
LIBFS_PREFIX = $(LIB_PREFIX)/fs
LIBCLUI_PREFIX = $(LIB_PREFIX)/clui
LIBFMTUTIL_PREFIX = $(LIB_PREFIX)/fmtutil

LIBGRAPH_PREFIX = $(LIB_PREFIX)/graph
LIBSOFTREND_PREFIX = $(LIB_PREFIX)/softrend
LIBDRAW_PREFIX = $(LIB_PREFIX)/draw
LIBGUI_PREFIX = $(LIB_PREFIX)/gui

LIBEXT4_PREFIX = $(LIB_PREFIX)/ext4

LIBUSB_PREFIX = $(LIB_PREFIX)/usb
LIBUSBHOST_PREFIX = $(LIB_PREFIX)/usbhost
LIBUSBDEV_PREFIX = $(LIB_PREFIX)/usbdev
LIBUSBHID_PREFIX = $(LIB_PREFIX)/usbhid
LIBUSBVIRT_PREFIX = $(LIB_PREFIX)/usbvirt

LIBDRV_PREFIX = $(LIB_PREFIX)/drv
LIBHOUND_PREFIX = $(LIB_PREFIX)/hound
LIBPCM_PREFIX = $(LIB_PREFIX)/pcm
LIBNIC_PREFIX = $(LIB_PREFIX)/nic
LIBIEEE80211_PREFIX = $(LIB_PREFIX)/ieee80211
LIBMINIX_PREFIX = $(LIB_PREFIX)/minix
LIBCOMPRESS_PREFIX = $(LIB_PREFIX)/compress
LIBDLTEST_PREFIX = $(LIB_PREFIX)/dltest

LIBSCSI_PREFIX = $(LIB_PREFIX)/scsi
LIBTRACKMOD_PREFIX = $(LIB_PREFIX)/trackmod

LIBBITHENGE_PREFIX = $(LIB_PREFIX)/bithenge

LIBHTTP_PREFIX = $(LIB_PREFIX)/http
LIBURI_PREFIX = $(LIB_PREFIX)/uri

LIBNETTL_PREFIX = $(LIB_PREFIX)/nettl

AFLAGS =
LFLAGS = --fatal-warnings --warn-common

# FIXME: This condition is a workaround for issues #692 and #693.
ifneq ($(KARCH),ia64)
ifneq ($(KARCH),mips32)
	AFLAGS += --fatal-warnings
endif
endif

ifeq ($(STATIC_NEEDED),y)
	STATIC_BUILD = y
else
	ifeq ($(STATIC_ONLY),y)
		STATIC_BUILD = y
	else
		ifeq ($(CONFIG_USE_SHARED_LIBS),y)
			STATIC_BUILD = n
		else
			STATIC_BUILD = y
		endif
	endif
endif

ifeq ($(STATIC_BUILD),y)
	BASE_LIBS = $(LIBC_PREFIX)/libc.a $(LIBSOFTINT_PREFIX)/libsoftint.a
	ifeq ($(MATH),y)
		BASE_LIBS += $(LIBMATH_PREFIX)/libmath.a
	endif
else
	BASE_LIBS = $(LIBC_PREFIX)/libc.so.0 $(LIBSOFTINT_PREFIX)/libsoftint.so.0
	LINK_DYNAMIC = y
	ifeq ($(MATH),y)
		BASE_LIBS += $(LIBMATH_PREFIX)/libmath.so.0
	endif
endif

ifeq ($(LINK_DYNAMIC),y)
	LFLAGS += -Bdynamic
	LINKER_SCRIPT ?= $(LIBC_PREFIX)/arch/$(UARCH)/_link-dlexe.ld
else
	LINKER_SCRIPT ?= $(LIBC_PREFIX)/arch/$(UARCH)/_link.ld
endif

ifeq ($(MATH),y)
	INCLUDES_FLAGS = $(LIBC_INCLUDES_FLAGS) $(LIBMATH_INCLUDES_FLAGS)
else
	INCLUDES_FLAGS = $(LIBC_INCLUDES_FLAGS)
endif

# PCUT-based unit tests
ifneq ($(TEST_SOURCES),)
	TEST_OUTPUT = $(TEST_BINARY)
	TEST_DISASM = $(TEST_BINARY).disasm
	TEST_CFLAGS = -I$(LIB_PREFIX)/pcut/include -D__helenos__
	TEST_OUTPUT_LIBS = $(LIB_PREFIX)/pcut/libpcut.a
	EXTRA_CLEAN += $(TEST_OUTPUT) $(TEST_OUTPUT).map $(TEST_DISASM)
ifneq ($(LIBRARY),)
	TEST_OUTPUT_LIBS += $(OUTPUT)
endif
	TEST_OUTPUT_LIBS += $(TEST_LIBS)
endif

.PHONY: all all-test clean depend

all: $(VERSION_DEF) $(COMMON_MAKEFILE) $(CONFIG_MAKEFILE) $(CONFIG_HEADER) $(LIBS) $(OUTPUT) $(LOUTPUT) $(EXTRA_OUTPUT)

all-test: $(TEST_OUTPUT) $(TEST_DISASM)

clean:
	rm -f $(JOB) $(OUTPUT) $(LARCHIVE) $(LOUTPUT) $(EXTRA_OUTPUT) $(EXTRA_CLEAN)
	find . -name '*.o' -follow -exec rm \{\} \;
	find . -name '*.lo' -follow -exec rm \{\} \;
	find . -name '*.d' -follow -exec rm \{\} \;

COMMON_CFLAGS = $(INCLUDES_FLAGS) -O$(OPTIMIZATION) -imacros $(CONFIG_HEADER) \
	-ffreestanding -fno-builtin -nostdlib -nostdinc -fexec-charset=UTF-8 \
	-finput-charset=UTF-8 -D__$(ENDIANESS)__ -fno-common \
	-fdebug-prefix-map=$(realpath $(ROOT_PATH))=.

GCC_CFLAGS = -ffunction-sections -Wall -Wextra -Wno-clobbered \
	-Wno-unused-parameter -Wmissing-prototypes -std=gnu99 \
	-Werror-implicit-function-declaration \
	-Wwrite-strings -pipe

# -Wno-missing-prototypes is there because it warns about main().
# This should be fixed elsewhere.
CLANG_CFLAGS = -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wno-typedef-redefinition \
	-Wno-missing-prototypes -Wno-unused-command-line-argument \
	-std=gnu99 -Werror-implicit-function-declaration -Wwrite-strings \
	-pipe -fno-stack-protector -fno-PIC

ifeq ($(CONFIG_DEBUG),y)
	COMMON_CFLAGS += -Werror
endif

ifeq ($(CONFIG_LINE_DEBUG),y)
	GCC_CFLAGS += -ggdb
	CLANG_CFLAGS += -g
endif

# Prepare for POSIX before including platform specific stuff
ifeq ($(POSIX_COMPAT),y)
	CFLAGS += -I$(LIBPOSIX_PREFIX)/include/posix -I$(LIBPOSIX_PREFIX)/include/
	BASE_LIBS = $(LIBPOSIX_PREFIX)/libposixaslibc.a $(LIBPOSIX_PREFIX)/libc4posix.a $(LIBSOFTINT_PREFIX)/libsoftint.a
endif

## Setup platform configuration
#

-include $(LIBC_PREFIX)/arch/$(UARCH)/Makefile.common

## Compilation options
#

JOBFILE = $(LIBC_PREFIX)/../../../tools/jobfile.py

ifeq ($(COMPILER),clang)
	CFLAGS += $(COMMON_CFLAGS) $(CLANG_CFLAGS)
else
	CFLAGS += $(COMMON_CFLAGS) $(GCC_CFLAGS)
endif

ifeq ($(CONFIG_STRIP_BINARIES),y)
	LFLAGS += --strip-all
endif

LIB_CFLAGS = $(CFLAGS) -fPIC
LIB_LFLAGS = $(LFLAGS) -shared -soname $(LSONAME) --whole-archive

AS_CFLAGS := $(addprefix -Xassembler ,$(AFLAGS))
LD_CFLAGS := $(addprefix -Xlinker ,$(LFLAGS))

OBJECTS := $(addsuffix .o,$(basename $(SOURCES)))
LOBJECTS := $(addsuffix .lo,$(basename $(SOURCES)))
TEST_OBJECTS := $(addsuffix .test.o,$(basename $(TEST_SOURCES)))
DEPENDS := $(addsuffix .d,$(basename $(SOURCES))) $(addsuffix .test.d,$(basename $(TEST_SOURCES)))

-include $(DEPENDS)

%.disasm: %
ifeq ($(CONFIG_LINE_DEBUG),y)
	$(OBJDUMP) -d -S $< > $@
else
	$(OBJDUMP) -d $< > $@
endif

ifneq ($(BINARY),)
$(BINARY): $(LINKER_SCRIPT) $(OBJECTS) $(LIBS) $(BASE_LIBS)
	$(LD) -n $(LFLAGS) -T $(LINKER_SCRIPT) -M -Map $(BINARY).map -o $(BINARY) $(OBJECTS) $(LIBS) $(BASE_LIBS)
endif

ifneq ($(SLIBRARY),)
$(LOUTPUT): $(LARCHIVE) $(LIBC_PREFIX)/arch/$(UARCH)/_link-shlib.ld
	$(LD) -T $(LIBC_PREFIX)/arch/$(UARCH)/_link-shlib.ld $(LIB_LFLAGS) $(LARCHIVE) -o $@ -Map $(LOUTPUT).map

$(LIBRARY).so:
	ln -s $(SLIBRARY) $@

$(LSONAME):
	ln -s $(SLIBRARY) $@
endif

ifneq ($(LIBRARY),)
$(LIBRARY).a: $(OBJECTS)
	$(AR) rc $@ $(OBJECTS)
endif

ifneq ($(LARCHIVE),)
$(LARCHIVE): $(LOBJECTS)
	$(AR) rc $@ $(LOBJECTS)
endif

ifneq ($(TEST_OUTPUT),)
$(TEST_OUTPUT): $(LINKER_SCRIPT) $(TEST_OBJECTS) $(TEST_OUTPUT_LIBS)
	$(LD) -n $(LFLAGS) -T $(LINKER_SCRIPT) -M -Map $(TEST_OUTPUT).map -o $@ $(TEST_OBJECTS) $(TEST_OUTPUT_LIBS) $(LIBS) $(BASE_LIBS)
endif

%.o: %.S | depend
	$(CC) -MD $(DEFS) $(CFLAGS) $(EXTRA_CFLAGS) $(AS_CFLAGS) -D__ASM__ -c $< -o $@
ifeq ($(PRECHECK),y)
	$(JOBFILE) $(JOB) $< $@ as asm/preproc $(DEFS) $(CFLAGS) $(EXTRA_CFLAGS) -D__ASM__
endif

%.o: %.s | depend
	$(CC) -MD $(DEFS) $(CFLAGS) $(EXTRA_CFLAGS) $(AS_CFLAGS) -D__ASM__ -c $< -o $@
ifeq ($(PRECHECK),y)
	$(JOBFILE) $(JOB) $< $@ as asm
endif

%.o: %.c | depend
	$(CC) -MD $(DEFS) $(CFLAGS) $(EXTRA_CFLAGS) -c $< -o $@
ifeq ($(PRECHECK),y)
	$(JOBFILE) $(JOB) $< $@ cc core $(DEFS) $(CFLAGS) $(EXTRA_CFLAGS)
endif

%.test.o: %.c | depend
	$(CC) -MD $(DEFS) $(CFLAGS) $(EXTRA_CFLAGS) $(TEST_CFLAGS) -c $< -o $@
ifeq ($(PRECHECK),y)
	$(JOBFILE) $(JOB) $< $@ cc core $(DEFS) $(CFLAGS) $(EXTRA_CFLAGS) $(TEST_CFLAGS)
endif

%.lo: %.S | depend
	$(CC) -MD $(DEFS) $(LIB_CFLAGS) $(EXTRA_CFLAGS) $(AS_CFLAGS) -D__ASM__ -c $< -o $@
ifeq ($(PRECHECK),y)
	$(JOBFILE) $(JOB) $< $@ as asm/preproc $(DEFS) $(LIB_CFLAGS) $(EXTRA_CFLAGS) -D__ASM__
endif

%.lo: %.s | depend
	$(CC) -MD $(DEFS) $(LIB_CFLAGS) $(EXTRA_CFLAGS) $(AS_CFLAGS) -D__ASM__ -c $< -o $@
ifeq ($(PRECHECK),y)
	$(JOBFILE) $(JOB) $< $@ as asm
endif

%.lo: %.c | depend
	$(CC) -MD $(DEFS) $(LIB_CFLAGS) $(EXTRA_CFLAGS) -c $< -o $@
ifeq ($(PRECHECK),y)
	$(JOBFILE) $(JOB) $< $@ cc core $(DEFS) $(LIB_CFLAGS) $(EXTRA_CFLAGS)
endif

depend: $(PRE_DEPEND)

##
# This explicit dependecy of the output binary on the object files seems to be
# necessary to prevent parallel build failures (GNU make bug #26893 ???).
$(OUTPUT): $(OBJECTS)

$(LARCHIVE): $(LOBJECTS)
