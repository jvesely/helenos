#
# Copyright (C) 2005 Martin Decky
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# - The name of the author may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

GCC_CFLAGS = -I$(LIBC_PREFIX)/include -O3 -imacros $(LIBC_PREFIX)/../../../config.h \
	-fexec-charset=UTF-8 -fwide-exec-charset=UTF-32$(ENDIANESS) \
	-finput-charset=UTF-8 -ffreestanding -fno-builtin -nostdlib -nostdinc \
	-Wall -Wextra -Wno-unused-parameter -Wmissing-prototypes \
	-Werror-implicit-function-declaration -Werror -pipe -g -D__$(ENDIANESS)__

ICC_CFLAGS = -I$(LIBC_PREFIX)/include -O3 -imacros $(LIBC_PREFIX)/../../../config.h \
	-fexec-charset=UTF-8 -fwide-exec-charset=UTF-32$(ENDIANESS) \
	-finput-charset=UTF-8 -ffreestanding -fno-builtin -nostdlib -nostdinc \
	-Wall -Wextra -Wno-unused-parameter -Wmissing-prototypes \
	-Werror-implicit-function-declaration -Werror -pipe -g -D__$(ENDIANESS)__

CLANG_CFLAGS = -I$(LIBC_PREFIX)/include -O3 -imacros $(LIBC_PREFIX)/../../../config.h \
	-fexec-charset=UTF-8 -fwide-exec-charset=UTF-32$(ENDIANESS) \
	-finput-charset=UTF-8 -ffreestanding -fno-builtin -nostdlib -nostdinc \
	-Wall -Wextra -Wno-unused-parameter -Wmissing-prototypes \
	-Werror-implicit-function-declaration -pipe -g -arch $(CLANG_ARCH) \
	-D__$(ENDIANESS)__

LFLAGS = -M -N $(SOFTINT_PREFIX)/libsoftint.a
AFLAGS =

## Cross-toolchain prefix
#

ifndef CROSS_PREFIX
	CROSS_PREFIX = /usr/local
endif

## Setup platform configuration
#

-include $(LIBC_PREFIX)/../../../Makefile.config
-include $(LIBC_PREFIX)/../../../config.defs
-include $(LIBC_PREFIX)/arch/$(UARCH)/Makefile.inc

## Simple detection of the host system
#
HOST = $(shell uname)

## On Solaris, some utilities have different names
#
ifeq ($(HOST),SunOS)
	BINUTILS_PREFIX = "g"
else
	BINUTILS_PREFIX = ""
endif

## Toolchain configuration
#

JOBFILE = $(LIBC_PREFIX)/../../../tools/jobfile.py

ifeq ($(COMPILER),gcc_cross)
	CC = $(TOOLCHAIN_DIR)/$(TARGET)-gcc
	GCC = $(CC)
	AS = $(TOOLCHAIN_DIR)/$(TARGET)-as
	LD = $(TOOLCHAIN_DIR)/$(TARGET)-ld
	AR = $(TOOLCHAIN_DIR)/$(TARGET)-ar
	OBJCOPY = $(TOOLCHAIN_DIR)/$(TARGET)-objcopy
	OBJDUMP = $(TOOLCHAIN_DIR)/$(TARGET)-objdump
	CFLAGS = $(GCC_CFLAGS)
	DEPEND_DEFS = $(DEFS) $(CONFIG_DEFS)
endif

ifeq ($(COMPILER),gcc_native)
	CC = gcc
	GCC = $(CC)
	AS = $(BINUTILS_PREFIX)as
	LD = $(BINUTILS_PREFIX)ld
	AR = $(BINUTILS_PREFIX)ar
	OBJCOPY = $(BINUTILS_PREFIX)objcopy
	OBJDUMP = $(BINUTILS_PREFIX)objdump
	CFLAGS = $(GCC_CFLAGS)
	DEPEND_DEFS = $(DEFS) $(CONFIG_DEFS)
endif

ifeq ($(COMPILER),icc)
	CC = icc
	GCC = gcc
	AS = as
	LD = ld
	AR = ar
	OBJCOPY = objcopy
	OBJDUMP = objdump
	CFLAGS = $(ICC_CFLAGS)
	DEPEND_DEFS = $(DEFS) $(CONFIG_DEFS)
endif

ifeq ($(COMPILER),clang)
	CC = clang
	GCC = gcc
	AS = $(BINUTILS_PREFIX)as
	LD = $(BINUTILS_PREFIX)ld
	AR = $(BINUTILS_PREFIX)ar
	OBJCOPY = $(BINUTILS_PREFIX)objcopy
	OBJDUMP = $(BINUTILS_PREFIX)objdump
	CFLAGS = $(CLANG_CFLAGS)
	DEPEND_DEFS = $(DEFS) $(CONFIG_DEFS)
endif
