interface devmap_driver {
		/* Establish connection (iface is DEVMAP_DRIVER) */
		ipcarg_t ipc_m_connect_me_to(in ipcarg_t iface);
		
		/* Register as a new driver */
		ipcarg_t driver_register(in_copy string name);
		
		/* Unregister all devices and the driver itself */
		ipcarg_t driver_unregister(void);
		
		/* Register new device and return handle */
		ipcarg_t device_register(in_copy string name, out ipcarg_t handle);
		
		/* Unregister device */
		ipcarg_t device_unregister(in ipcarg_t handle);
		
		/* Resolve device name to handle */
		ipcarg_t device_get_handle(in ipcarg_t flags, in_copy string name);
		
		/* Get device name for a given handle */
		ipcarg_t device_get_name(in ipcarg_t handle);
		
		/* Close connection */
		ipcarg_t ipc_m_phone_hungup(void);
	protocol:
		[devmap_driver.bp]
};

interface devmap_client {
		/* Establish connection (iface is DEVMAP_CLIENT) or forward to device (iface is DEVMAP_CONNECT_TO_DEVICE) */
		ipcarg_t ipc_m_connect_me_to(in ipcarg_t iface, in ipcarg_t handle);
		
		/* Resolve device name to handle */
		ipcarg_t device_get_handle(in ipcarg_t flags, in_copy string name);
		
		/* Get device name for a given handle */
		ipcarg_t device_get_name(in ipcarg_t handle);
		
		/* Clone NULL device */
		ipcarg_t device_null_create(out ipcarg_t index);
		
		/* Destroy NULL device */
		ipcarg_t device_null_destroy(in ipcarg_t index);
		
		/* Get number of devices */
		ipcarg_t device_get_count(out ipcarg_t count);
		
		/* Get an array of (device_name, handle) pairs */
		ipcarg_t device_get_devices(out_copy stream data);
		
		/* Close connection */
		ipcarg_t ipc_m_phone_hungup(void);
	protocol:
		[devmap_client.bp]
	
};

frame devmap {
	provides:
		devmap_driver devmap_driver;
		devmap_client devmap_client;
	requires:
		[/uspace/lib/libc/requires]
	protocol:
		[devmap_server.bp]
};
